{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","username","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","error","info","this","setState","hasError","Component","App","onSearchEvent","event","target","value","fetch","then","reponse","json","users","filteredRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAmBeA,EAhBF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,GAElC,OACI,sBAAKC,UAAU,sDAAf,UAEI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,eAAC,WAAD,WACI,6BAAKH,IACL,4BAAIE,IACJ,4BAAID,WCYLM,EArBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdH,KAAMQ,EAAOG,GAAGX,KAChBE,SAAUM,EAAOG,GAAGT,SACpBD,MAASO,EAAOG,GAAGV,OAJdU,SCKlBC,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBW,KAAK,SACLC,YAAY,SACZC,SAAUH,OCEPI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,UAAU,SAAUC,OAAO,mBAAoBC,OAAQ,SAArE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACR,UAAY,GAHF,E,qDAMlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACC,UAAS,M,oBAG5B,WACI,OAAIF,KAAKH,MAAMK,SACP,4CAEDF,KAAKV,MAAMK,a,GAfCQ,aCkDZC,G,wDAzCX,aAAc,IAAD,8BACT,gBAeJC,cAAgB,SAACC,GACb,EAAKL,SAAS,CAACjB,YAAasB,EAAMC,OAAOC,SAdzC,EAAKX,MAAQ,CACTlB,OAAO,GACPK,YAAY,IALP,E,qDASb,WAAoB,IAAD,OACfyB,MAAM,8CACDC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAOkC,S,oBAS7C,WAAU,IAAD,OAECC,EAAiBd,KAAKH,MAAMlB,OAAOoC,QAAO,SAAAC,GAC5C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAEpE,OACI,sBAAK1C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKK,gBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQmC,e,GAjCxBX,cCEHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d03c2038.chunk.js","sourcesContent":["import React,  {Fragment} from 'react';\n//bacground color is light greeb, border 3px, padding 3px, margin 2 and grow is an effect\n//props = name, email, id such as props.name\nconst Card = ({name, email, username, id}) => {\n    \n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \n        \n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <Fragment>\n                <h2>{name}</h2>\n                <p>{username}</p>\n                <p>{email}</p>\n            </Fragment>\n        </div>\n\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{    \n    return (\n        <div>\n            { //итерация списка robots\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i} \n                            id={robots[i].id} \n                            name={robots[i].name} \n                            username={robots[i].username} \n                            email = {robots[i].email} \n                        />\n                    );\n                            \n                })\n            }           \n        </div>       \n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue'\n            type=\"search\" \n            placeholder=\"search\"\n            onChange={searchChange} //когда вводишь текст выходит event.target.value \n            />\n        </div>\n        \n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflowY:'scroll', border:'3px solid yellow', height: '600px', }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state= {\n            \"hasError\": false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n\n    }\n    render(){\n        if (this.state.hasError){\n        return (<h1>It's baaad</h1>)\n        }\n        return this.props.children\n    }\n    \n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry  from '../components/ErrorBoundry';\n\n\nimport './App.css'\n\n\nclass App extends Component {\n    constructor(){\n        super();\n        //как моделька имеет два свойства, это список роботов(в CardList) и поле для поиска (SearchBox)\n        this.state = {\n            robots:[],\n            searchfield:''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users') //отправить url где есть arrays with objects\n            .then(reponse => reponse.json()) //полученный ответ конвертируй в json\n            .then(users => this.setState({robots:users})); //users определить в параметр robots\n    }\n        \n    //this.setState - modify state\n    onSearchEvent = (event) =>{\n        this.setState({searchfield: event.target.value})\n        \n   \n    }\n    render() {\n        //фильтр по тому что человек вводит в поле поиск, в маленькими буквами это включает то, что написано в searchfield\n        const filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        return(\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchEvent}/>                \n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundry>                    \n                </Scroll>\n                \n            </div>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'; //as a main parent\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n \nReactDOM.render(\n  <React.StrictMode>\n    <App />   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}